pipeline { 
    environment { 

        registry = "sahlikhalifa/devops" 
        
        registryCredential = 'dockerhub_id' 

        dockerImage = '' 
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "192.168.100.120:8081"
        NEXUS_REPOSITORY = "maven-nexus-repo"
        NEXUS_CREDENTIAL_ID = "nexus-user-credentials"

    }

    agent any 
    tools { 
        maven "M1_HOME"
        
    }

    stages { 

    stage('checkout git') { 

            steps {
            git branch: 'main', url: 'https://github.com/khalifaSahli/devops.git'
    

            }

        } 
        
    stage('MVN clean'){
            steps{
                sh 'mvn clean:clean'
            }
        }
    stage('MVN COMPILE'){
            steps{
                sh 'mvn compiler:compile'
            }
        }	
    stage('Test unitaire') {
            steps {
                sh 'mvn test'  	        
            } 
      }
      stage('SonarQube analysis'){
                       steps{
                       withSonarQubeEnv(installationName:'sonar')
                         {
			   
                           sh 'mvn sonar:sonar'
                           }
                           }
                 }	
        /*
    stage('mvn install') { 

           steps {
      	sh 'mvn  install -DskipTests=true '
                }
             

        }
        
          
        
        
        
    stage('Building our image') { 

           steps {                script { 
          
                    dockerImage = docker.build registry + ":$BUILD_NUMBER"
                   sh 'docker build -t sahlikhalifa/devops .'
                } }
             

        }
        
        
       
      
    stage('Deploy our image on DockerHub') { 
            steps { 
                script { 
                    docker.withRegistry( '', registryCredential ) { 
                    dockerImage.push() 
               
                    }
                } 
            }
        }
   
   
   
   
     stage(' docker-compose') {
            steps {
                
                              sh 'docker-compose -f docker-compose.yml up -d'

   
            }
        }
 */
        
        
  /*     
    stage('push our image on nexus') { 

     steps {
                        script {
                    pom = readMavenPom file: "pom.xml";
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }

             

       } } 
        
       */ 
    stage('Cleaning up') { 
            steps { 
               
                sh "docker rmi $registry:$BUILD_NUMBER" 
            }
        } 



     

    }
    post {
       always {
          junit(
        allowEmptyResults: true,
        testResults: 'target/**/*.xml'
      )
      }
   }
    
}




